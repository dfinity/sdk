name: Audit

on:
  push:
    branches:
      - master
  pull_request:

jobs:
  build_matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - uses: actions/checkout@v1
      - id: set-matrix
        run: echo "::set-output name=matrix::$(scripts/workflows/audit-matrix.py)"

  test:
    name: audit
    runs-on: ${{ matrix.os }}
    needs: [ build_matrix ]
    strategy:
      matrix: ${{fromJson(needs.build_matrix.outputs.matrix)}}

    steps:
      - uses: actions/checkout@v2
        with:
          path: sdk
      - uses: actions/checkout@v2
        with:
          repository: 'RustSec/advisory-db'
          path: advisory-db
          ref: ${{ matrix.advisory-db-rev }}

      - uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Install Rust
        run: |
          rustup update ${{ matrix.rust }} --no-self-update
          rustup default ${{ matrix.rust }}
          cargo install --force --version ${{ matrix.cargo-audit }} cargo-audit
      - name: Audit
        run: |
          cd sdk
          # RUSTSEC-2020-0159 - direct dependency on chrono 0.4.19 "Potential segfault in `localtime_r` invocations"
          # RUSTSEC-2020-0071 - indirect dependency on time 0.1.43 "Potential segfault in the time crate"
          # RUSTSEC-2021-0124 - tokio 0.2.25 "Data race when sending and receiving after closing a `oneshot` channel"
          cargo audit --no-fetch --db "${GITHUB_WORKSPACE}"/advisory-db \
              --ignore RUSTSEC-2020-0159 \
              --ignore RUSTSEC-2020-0071 \
              --ignore RUSTSEC-2021-0124
        env:
          RUST_BACKTRACE: 1

  aggregate:
    name: audit:required
    if: ${{ always() }}
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: check step result directly
        if: ${{ needs.test.result != 'success' }}
        run: exit 1
