name: build
on: [push]
#  push:
#    branches:
#      - master
#  pull_request:

jobs:
  build_dfx:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: true
      matrix:
        os: [ macos-latest, ubuntu-latest ]
        rust: [ '1.52.1' ]
        binary_path: [ 'target/debug' ]
    steps:
      - uses: actions/checkout@v1
      - name: Cache Cargo
        uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}-${{ matrix.rust }}-1
      - name: Install Rust
        run: |
          rustup update ${{ matrix.rust }} --no-self-update
          rustup default ${{ matrix.rust }}
          rustup component add rustfmt
      - name: Build
        # run: cargo build --locked --release
        run: cargo build --locked
        env:
          OPENSSL_STATIC: yes
      - name: Strip binaries
        run: |
          cd ${{ matrix.binary_path }}
          sudo chown -R $(whoami) .
          ls -l dfx
          strip dfx
          ls -l dfx
        if: contains(matrix.os, 'ubuntu')
      - name: Upload Artifacts
        uses: actions/upload-artifact@v2
        with:
          name: dfx-${{ matrix.os }}-rs-${{ matrix.rust }}
          path: ${{ matrix.binary_path }}/dfx

  list_tests:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - uses: actions/checkout@v1
      - id: set-matrix
        # see https://github.blog/changelog/2020-04-15-github-actions-new-workflow-features/
        # run: echo "::set-output name=tests::$(cd e2e ; echo -n "$(find tests-dfx -name '*.bash')\n$(find tests-replica -name '*.bash')") | jq --raw-input --slurp 'split("\n")'"
        # run: echo "::set-output name=tests::$(cd e2e ; python -c 'import json; import sys; print(json.dumps(sys.argv[1:]).replace("\"", "\\\""))' tests-dfx/*.bash tests-replica/*.bash)"
        #
        run: |
          MATRIX="$(.github/workflows/e2e-matrix.py)"
          echo "${MATRIX}"
          echo "::set-output name=matrix::${MATRIX}"

  smoke:
    runs-on: ${{ matrix.os }}
    needs: build_dfx
    strategy:
      fail-fast: false
      matrix:
        backend: [ 'ic-ref', 'replica' ]
        os: [ macos-latest, ubuntu-latest ]
        rust: [ '1.52.1' ]
    steps:
      - uses: actions/checkout@v1
      - name: Download dfx binary
        uses: actions/download-artifact@v2
        with:
          name: dfx-${{ matrix.os }}-rs-${{ matrix.rust }}
          path: /usr/local/bin
      - name: Setup dfx binary
        run: chmod +x /usr/local/bin/dfx
      - name: start and deploy
        run: |
          pwd
          time dfx cache install
          time dfx new smoke
          cd smoke
          if [ "${{ matrix.backend}}" = "ic-ref" ]; then
              time dfx start --emulator --background
          else
              time dfx start --background
          fi
          time dfx deploy
          time dfx canister call smoke greet '("fire")'
          time curl --fail http://localhost:8000/sample-asset.tst?canisterId=$(dfx canister id smoke_assets)
          time dfx stop

  test:
    runs-on: ${{ matrix.os }}
    needs: [ build_dfx, list_tests ]
    strategy:
      fail-fast: false
      matrix: ${{fromJson(needs.list_tests.outputs.matrix)}}
#      matrix:
#        test: [
#            "dfx/assetscanister",
#            "dfx/base",
#            "dfx/basic-project",
#            "dfx/bootstrap",
#            "dfx/build",
#            "dfx/build_granular",
#            "dfx/call",
#            "dfx/candid_ui",
#            "dfx/certificate",
#            "dfx/certified_info",
#            "dfx/config",
#            "dfx/create",
#            "dfx/dfx_install",
#            "dfx/frontend",
#            "dfx/id",
#            "dfx/identity",
#            "dfx/identity_command",
#            "dfx/install",
#            "dfx/leak",
#            "dfx/network",
#            "dfx/new",
#            "dfx/packtool",
#            "dfx/ping",
#            "dfx/print",
#            "dfx/provider",
#            "dfx/request_status",
#            "dfx/secp256k1",
#            "dfx/sign_send",
#            "dfx/signals",
#            "dfx/start",
#            "dfx/update_settings",
#            "dfx/upgrade",
#            "dfx/usage",
#            "dfx/usage_env",
#            "dfx/wallet",
#            "replica/deploy",
#            "replica/lifecycle"
#        ]
#        #test: ${{fromJson(needs.list_tests.outputs.tests)}}
#        backend: [ 'ic-ref', 'replica' ]
#        os: [ macos-latest, ubuntu-latest ]
#        rust: [ '1.52.1' ]
    env:
      E2E_TEST: tests-${{ matrix.test }}.bash

    steps:
      - uses: actions/checkout@v1
      - name: Download dfx binary
        uses: actions/download-artifact@v2
        with:
          name: dfx-${{ matrix.os }}-rs-${{ matrix.rust }}
          path: /usr/local/bin
      - name: Setup dfx binary
        run: chmod +x /usr/local/bin/dfx
      - name: Provision Darwin
        if: matrix.os == 'macos-latest'
        run: bash .github/workflows/provision-darwin.sh
      - name: Provision Linux
        if: matrix.os == 'ubuntu-latest'
        run: bash .github/workflows/provision-linux.sh

      - name: Prepare environment
        run: |
          echo "archive=$(pwd)/e2e/archive" >> "$GITHUB_ENV"
          echo "assets=$(pwd)/e2e/assets" >> "$GITHUB_ENV"
          echo "utils=$(pwd)/e2e/utils" >> "$GITHUB_ENV"
          if [ "${{ matrix.backend }}" == "ic-ref" ]; then
              echo "USE_IC_REF=1" >> "$GITHUB_ENV"
          fi
          export

      - name: Run e2e test
        run: |
          function display_log() {
            if [ -f "$GITHUB_WORKSPACE"/test.log ]; then
              echo "test log:"
              cat "$GITHUB_WORKSPACE"/test.log
            fi
          }
          trap display_log EXIT
          timeout 3600 bats "e2e/$E2E_TEST"
