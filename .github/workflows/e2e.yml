name: build
on: [push]
#  push:
#    branches:
#      - master
#  pull_request:

jobs:
  http:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ macos-latest, ubuntu-latest ]
    steps:
      - name: troubleshoot
        run: |
          RANDOM_EMPHEMERAL_PORT=$(shuf -i 49152-65535 -n 1)
          echo "port is $RANDOM_EPHEMERAL_PORT"
          python3 -m http.server "$RANDOM_EMPHEMERAL_PORT" &
          WEB_SERVER_PID=$!
          echo "WEB_SERVER_PID is $WEB_SERVER_PID"

          timeout 60 sh -c "while ! nc -z localhost $RANDOM_EMPHEMERAL_PORT; do sleep 1; done"
          kill "$WEB_SERVER_PID"

  build_dfx:
    needs: http
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: true
      matrix:
        os: [ macos-latest, ubuntu-latest ]
        rust: [ '1.52.1' ]
        binary_path: [ 'target/release' ]
    steps:
      - uses: actions/checkout@v1
      - name: Cache Cargo
        uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}-${{ matrix.rust }}-1
      - name: Install Rust
        run: |
          rustup update ${{ matrix.rust }} --no-self-update
          rustup default ${{ matrix.rust }}
          rustup component add rustfmt
      - name: Build
        run: cargo build --locked --release
        env:
          OPENSSL_STATIC: yes
      - name: Strip binaries
        run: |
          cd ${{ matrix.binary_path }}
          sudo chown -R $(whoami) .
          strip dfx
        if: contains(matrix.os, 'ubuntu')
      - name: Upload Artifacts
        uses: actions/upload-artifact@v2
        with:
          name: dfx-${{ matrix.os }}-rs-${{ matrix.rust }}
          path: ${{ matrix.binary_path }}/dfx

  make_matrix:
    needs: http
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - uses: actions/checkout@v1
      - id: set-matrix
        run: echo "::set-output name=matrix::$(scripts/workflows/e2e-matrix.py)"

  smoke:
    runs-on: ${{ matrix.os }}
    needs: build_dfx
    strategy:
      fail-fast: false
      matrix:
        backend: [ 'ic-ref', 'replica' ]
        os: [ macos-latest, ubuntu-latest ]
        rust: [ '1.52.1' ]
    steps:
      - uses: actions/checkout@v1
      - name: Download dfx binary
        uses: actions/download-artifact@v2
        with:
          name: dfx-${{ matrix.os }}-rs-${{ matrix.rust }}
          path: /usr/local/bin
      - name: Setup dfx binary
        run: chmod +x /usr/local/bin/dfx
      - name: start and deploy
        run: |
          pwd
          time dfx cache install
          time dfx new smoke
          cd smoke
          if [ "${{ matrix.backend}}" = "ic-ref" ]; then
              time dfx start --emulator --background
          else
              time dfx start --background
          fi
          time dfx deploy
          time dfx canister call smoke greet '("fire")'
          time curl --fail http://localhost:8000/sample-asset.txt?canisterId=$(dfx canister id smoke_assets)
          time dfx stop

  e2e:
    runs-on: ${{ matrix.os }}
    needs: [ build_dfx, make_matrix ]
    strategy:
      fail-fast: false
      matrix: ${{fromJson(needs.make_matrix.outputs.matrix)}}
    env:
      E2E_TEST: tests-${{ matrix.test }}.bash

    steps:
      - uses: actions/checkout@v1
      - name: Download dfx binary
        uses: actions/download-artifact@v2
        with:
          name: dfx-${{ matrix.os }}-rs-${{ matrix.rust }}
          path: /usr/local/bin
      - name: Setup dfx binary
        run: chmod +x /usr/local/bin/dfx
      - name: Provision Darwin
        if: matrix.os == 'macos-latest'
        run: bash scripts/workflows/provision-darwin.sh
      - name: Provision Linux
        if: matrix.os == 'ubuntu-latest'
        run: bash scripts/workflows/provision-linux.sh

      - name: Prepare environment
        run: |
          echo "archive=$(pwd)/e2e/archive" >> "$GITHUB_ENV"
          echo "assets=$(pwd)/e2e/assets" >> "$GITHUB_ENV"
          echo "utils=$(pwd)/e2e/utils" >> "$GITHUB_ENV"
          if [ "${{ matrix.backend }}" == "ic-ref" ]; then
              echo "USE_IC_REF=1" >> "$GITHUB_ENV"
          fi
          export

      - name: Run e2e test
        run: |
          function display_log() {
            if [ -f "$GITHUB_WORKSPACE"/test.log ]; then
              echo "test log:"
              cat "$GITHUB_WORKSPACE"/test.log
            fi
          }
          trap display_log EXIT
          timeout 3600 bats "e2e/$E2E_TEST"
