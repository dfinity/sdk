type TransformArgs = 
 record {
   context: blob;
   response: HttpResponsePayload;
 };
type HttpResponsePayload = 
 record {
   body: vec nat8;
   headers: vec HttpHeader;
   status: nat;
 };
type HttpHeader = 
 record {
   name: text;
   value: text;
 };
service : {
  getEthereumSigningMessage: () -> (record {
                                      message: text;
                                      nonce: text;
                                    });
  removeHTTPHeaders: (TransformArgs) -> (HttpResponsePayload) query;
  scoreBySignedEthereumAddress:
   (record {
      address: text;
      nonce: text;
      signature: text;
    }) -> (text);
  submitSignedEthereumAddressForScore:
   (record {
      address: text;
      nonce: text;
      signature: text;
    }) -> (text);
}
