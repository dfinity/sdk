use crate::lib::environment::Environment;
use crate::lib::error::DfxResult;

use anyhow::Context;
use candid::Principal;
use fn_error_context::context;
use ic_agent::identity::BasicIdentity;
use ic_agent::identity::Secp256k1Identity;

#[derive(Debug, PartialEq)]
pub enum CallSender {
    SelectedId,
    Wallet(Principal),
}

// Determine whether the selected Identity
// or the provided wallet canister ID should be the Sender of the call.
#[context("Failed to determine call sender.")]
pub async fn call_sender(_env: &dyn Environment, wallet: &Option<String>) -> DfxResult<CallSender> {
    let sender = if let Some(id) = wallet {
        CallSender::Wallet(
            Principal::from_text(&id)
                .with_context(|| format!("Failed to read principal from {:?}.", id))?,
        )
    } else {
        CallSender::SelectedId
    };
    Ok(sender)
}

#[context("Failed to validate pem file.")]
pub fn validate_pem_file(pem_content: &[u8]) -> DfxResult {
    // The PEM file generated by `dfx new` don't have EC PARAMETERS header and the curve is Ed25519
    let basic_identity_res = BasicIdentity::from_pem(pem_content);
    if basic_identity_res.is_err() {
        Secp256k1Identity::from_pem(pem_content).context("Failed to validate PEM content.")?;
    }
    Ok(())
}
