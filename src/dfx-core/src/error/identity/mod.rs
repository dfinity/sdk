pub mod convert_mnemonic_to_key;
pub mod create_new_identity;
pub mod export_identity;
pub mod generate_key;
pub mod get_identity_config_or_default;
pub mod get_legacy_credentials_pem_path;
pub mod initialize_identity_manager;
pub mod instantiate_identity_from_name;
pub mod load_identity;
pub mod load_pem;
pub mod load_pem_from_file;
pub mod load_pem_identity;
pub mod new_hardware_identity;
pub mod new_identity;
pub mod new_identity_manager;
pub mod remove_identity;
pub mod rename_identity;
pub mod save_pem;
pub mod write_pem_to_file;

use crate::error::config::ConfigError;
use crate::error::encryption::EncryptionError;
use crate::error::fs::FsError;
use crate::error::structured_file::StructuredFileError;
use crate::error::wallet_config::WalletConfigError;
use ic_agent::export::PrincipalError;
use ic_agent::identity::PemError;
use std::path::PathBuf;
use thiserror::Error;

#[derive(Error, Debug)]
pub enum IdentityError {
    #[error("Failed to ensure identity configuration directory exists: {0}")]
    EnsureIdentityConfigurationDirExistsFailed(FsError),

    #[error("Failed to generate a fresh encryption configuration: {0}")]
    GenerateFreshEncryptionConfigurationFailed(EncryptionError),

    #[error("Failed to get config directory for identity manager: {0}")]
    GetConfigDirectoryFailed(ConfigError),

    #[error("Failed to get shared network data directory: {0}")]
    GetSharedNetworkDataDirectoryFailed(ConfigError),

    #[error("Identity {0} does not exist at '{1}'.")]
    IdentityDoesNotExist(String, PathBuf),

    #[error("Failed to read principal from id '{0}': {1}")]
    ParsePrincipalFromIdFailed(String, PrincipalError),

    #[error("Failed to rename '{0}' to '{1}' in the global wallet config: {2}")]
    RenameWalletFailed(Box<String>, Box<String>, WalletConfigError),

    #[error("An Identity named {0} cannot be created as it is reserved for internal use.")]
    ReservedIdentityName(String),

    #[error("Failed to save identity configuration: {0}")]
    SaveIdentityConfigurationFailed(StructuredFileError),

    #[error("Failed to save identity manager configuration: {0}")]
    SaveIdentityManagerConfigurationFailed(StructuredFileError),

    #[error(
        "Ed25519 v1 keys (those generated by OpenSSL) are not supported. Try again with a v2 key"
    )]
    UnsupportedKeyVersion(),

    #[error("Failed to validate PEM content: {0}")]
    ValidatePemContentFailed(Box<PemError>),
}
